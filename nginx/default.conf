server{
    listen 80;
    # listen [::]:80;
    # server_name 188.166.84.114/;
    # return 301 https://$server_name$request_uri;

    location /backend {
        add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,Keep-Alive,X-Requested-With,If-Modified-Since,access-control-allow-credentials,Access-Control-Allow-Origin';
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_redirect off;
        client_body_temp_path /tmp 1 2;

        resolver 127.0.0.11;
        set $target http://backend:8000;
        proxy_pass $target;
    }

    location /static-files/ {
        alias /static-files/;
    }
    
    location /media-files/ {
        alias /media-files/;
    }


    location / {
        try_files $uri @rewrites;
        root /frontend;
    }

    location @rewrites {
        rewrite ^(.+)$ /index.html last;
    }
}
# server{
#     listen 443 ssl http2;
#     # listen [::]:443 ssl http2;
#     # server_name 188.166.84.114/;
#     # ssl_certificate /etc/letsencrypt/live/valtech-dashboard.propulsion-learn.ch/fullchain.pem;
#     # ssl_certificate_key /etc/letsencrypt/live/valtech-dashboard.propulsion-learn.ch/privkey.pem;
#     location /backend/ {
#         resolver 127.0.0.11;  # docker embedded DNS server
#         set $target http://backend:8000;  # resolve during runtime rather than during startup
#         proxy_pass $target;
#     }
#     location /static-files/ {
#         alias /static-files/;
#     }
#     location /media-files/ {
#         alias /media-files/;
#     }
#     location / {
#         root /build;
#         try_files $uri /index.html;
#     }
# }